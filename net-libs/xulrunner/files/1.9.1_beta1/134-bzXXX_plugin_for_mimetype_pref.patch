We introduce a new preference that allows users to set a preferred
plugin for a given mime-type.

For example:

 pref ("modules.plugins.mimetype.application/x-shockwave-flash", "/usr/lib/firefox-3.0.1/plugins/libflashplayer.so")

would make the flashplyer installed in that location the preferred one to use.

In case the path is not valid, we just go ahead and search for the first match
given the mime-type.

---
 modules/plugin/base/src/nsPluginHostImpl.cpp |   23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

Index: mozilla/modules/plugin/base/src/nsPluginHostImpl.cpp
===================================================================
--- mozilla.orig/modules/plugin/base/src/nsPluginHostImpl.cpp
+++ mozilla/modules/plugin/base/src/nsPluginHostImpl.cpp
@@ -4492,18 +4492,41 @@
   nsPluginTag *plugins = nsnull;
   PRInt32     variants, cnt;
 
   LoadPlugins();
 
   // if we have a mimetype passed in, search the mPlugins
   // linked list for a match
   if (nsnull != aMimeType) {
+    nsresult res;
+    nsCOMPtr<nsIPrefBranch> prefB (do_QueryInterface(mPrefService));
+
+    char *preferredPluginPath = NULL;
+    nsCAutoString mimetypePrefString ("modules.plugins.mimetype.");
+    mimetypePrefString.Append(aMimeType);
+    const char *mimetypePrefChar = mimetypePrefString.get();
+    res = prefB->GetCharPref(mimetypePrefChar, &preferredPluginPath);
+
+    if(!NS_SUCCEEDED(res)) preferredPluginPath = NULL;
+
     plugins = mPlugins;
+    if(preferredPluginPath) {
+       while (nsnull != plugins) {
+         if (0 == PL_strcasecmp(plugins->mFileName.get(), preferredPluginPath) || 
+             0 == PL_strcasecmp(plugins->mFullPath.get(), preferredPluginPath)) {
+           return plugins;
+         }
+         plugins = plugins->mNext;
+       }
+    }
 
+    // if there is no pref for this mime-type, or if the plugin named in pref
+    // isn't found, we pick the first that matches for this mime-type
+    plugins = mPlugins;
     while (nsnull != plugins) {
       variants = plugins->mVariants;
 
       for (cnt = 0; cnt < variants; cnt++) {
         if ((!aCheckEnabled || plugins->IsEnabled()) &&
             plugins->mMimeTypeArray[cnt] &&
             (0 == PL_strcasecmp(plugins->mMimeTypeArray[cnt], aMimeType))) {
           return plugins;
