Debian compatibility patch that is supposed to make xulrunner also
consider /usr/lib/mozilla/plugins/ in sid as of xulrunner 1.9~rc2-4

---
---
 xpcom/io/nsAppFileLocationProvider.cpp |   13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

Index: mozilla/xpcom/io/nsAppFileLocationProvider.cpp
===================================================================
--- mozilla.orig/xpcom/io/nsAppFileLocationProvider.cpp
+++ mozilla/xpcom/io/nsAppFileLocationProvider.cpp
@@ -94,16 +94,18 @@
 // Locally defined keys used by nsAppDirectoryEnumerator
 #define NS_ENV_PLUGINS_DIR          "EnvPlugins"    // env var MOZ_PLUGIN_PATH
 #define NS_USER_PLUGINS_DIR         "UserPlugins"
 
 #ifdef XP_MACOSX
 #define NS_MACOSX_USER_PLUGIN_DIR   "OSXUserPlugins"
 #define NS_MACOSX_LOCAL_PLUGIN_DIR  "OSXLocalPlugins"
 #define NS_MAC_CLASSIC_PLUGIN_DIR   "MacSysPlugins"
+#elif XP_UNIX
+#define NS_SYSTEM_PLUGINS_DIR       "SysPlugins"
 #endif
 
 #define DEFAULTS_DIR_NAME           NS_LITERAL_CSTRING("defaults")
 #define DEFAULTS_PREF_DIR_NAME      NS_LITERAL_CSTRING("pref")
 #define DEFAULTS_SYSPREF_DIR_NAME   NS_LITERAL_CSTRING("syspref")
 #define DEFAULTS_PROFILE_DIR_NAME   NS_LITERAL_CSTRING("profile")
 #define RES_DIR_NAME                NS_LITERAL_CSTRING("res")
 #define CHROME_DIR_NAME             NS_LITERAL_CSTRING("chrome")
@@ -265,16 +267,23 @@
             rv = NS_NewNativeLocalFile(nsDependentCString(pathVar), PR_TRUE, getter_AddRefs(localFile));
     }
     else if (nsCRT::strcmp(prop, NS_USER_PLUGINS_DIR) == 0)
     {
         rv = GetProductDirectory(getter_AddRefs(localFile));
         if (NS_SUCCEEDED(rv))
             rv = localFile->AppendRelativeNativePath(PLUGINS_DIR_NAME);
     }
+#ifdef XP_UNIX
+    else if (nsCRT::strcmp(prop, NS_SYSTEM_PLUGINS_DIR) == 0) {
+        static const char *const sysLPlgDir = "/usr/lib/mozilla/plugins";
+        rv = NS_NewNativeLocalFile(nsDependentCString(sysLPlgDir),
+                                   PR_FALSE, getter_AddRefs(localFile));
+    }
+#endif
 #endif
     else if (nsCRT::strcmp(prop, NS_APP_SEARCH_DIR) == 0)
     {
         rv = CloneMozBinDirectory(getter_AddRefs(localFile));
         if (NS_SUCCEEDED(rv))
             rv = localFile->AppendRelativeNativePath(SEARCH_DIR_NAME);
     }
     else if (nsCRT::strcmp(prop, NS_APP_USER_SEARCH_DIR) == 0)
@@ -630,29 +639,29 @@
     NS_ENSURE_ARG_POINTER(_retval);
     *_retval = nsnull;
     nsresult rv = NS_ERROR_FAILURE;
     
     if (!nsCRT::strcmp(prop, NS_APP_PLUGINS_DIR_LIST))
     {
 #ifdef XP_MACOSX
         static const char* osXKeys[] = { NS_APP_PLUGINS_DIR, NS_GRE_PLUGINS_DIR, NS_MACOSX_USER_PLUGIN_DIR, NS_MACOSX_LOCAL_PLUGIN_DIR, nsnull };
-        static const char* os9Keys[] = { NS_APP_PLUGINS_DIR, NS_GRE_PLUGINS_DIR, NS_MAC_CLASSIC_PLUGIN_DIR, nsnull };
+        static const char* os9Keys[] = { NS_APP_PLUGINS_DIR, NS_GRE_PLUGINS_DIR, NS_MAC_CLASSIC_PLUGIN_DIR, NS_SYSTEM_PLUGINS_DIR, nsnull };
         static const char** keys;
         
         if (!keys) {
             OSErr err;
             long response;
             err = ::Gestalt(gestaltSystemVersion, &response); 
             keys = (!err && response >= 0x00001000) ? osXKeys : os9Keys;
         }
 
         *_retval = new nsAppDirectoryEnumerator(this, keys);
 #else
-        static const char* keys[] = { nsnull, NS_USER_PLUGINS_DIR, NS_APP_PLUGINS_DIR, NS_GRE_PLUGINS_DIR, nsnull };
+        static const char* keys[] = { nsnull, NS_USER_PLUGINS_DIR, NS_APP_PLUGINS_DIR, NS_GRE_PLUGINS_DIR, NS_SYSTEM_PLUGINS_DIR, nsnull };
         if (!keys[0] && !(keys[0] = PR_GetEnv("MOZ_PLUGIN_PATH"))) {
             static const char nullstr = 0;
             keys[0] = &nullstr;
         }
         *_retval = new nsPathsDirectoryEnumerator(this, keys);
 #endif
         NS_IF_ADDREF(*_retval);
         rv = *_retval ? NS_OK : NS_ERROR_OUT_OF_MEMORY;        
