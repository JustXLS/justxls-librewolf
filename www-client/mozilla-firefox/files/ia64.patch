--- xpcom/reflect/xptcall/src/md/unix/xptcstubs_ipf64.cpp.orig	2005-05-24 15:30:54.000000000 +0000
+++ xpcom/reflect/xptcall/src/md/unix/xptcstubs_ipf64.cpp	2007-11-26 10:54:42.000000000 +0000
@@ -39,6 +39,7 @@
 
 
 #include "xptcprivate.h"
+#include "xptiprivate.h"
 
 #include <stddef.h>
 #include <stdlib.h>
@@ -57,7 +58,6 @@
 
   nsXPTCMiniVariant paramBuffer[PARAM_BUFFER_COUNT];
   nsXPTCMiniVariant* dispatchParams = NULL;
-  nsIInterfaceInfo* iface_info = NULL;
   const nsXPTMethodInfo* info;
   nsresult result = NS_ERROR_FAILURE;
   uint64_t* iargs = intargs;
@@ -67,11 +67,10 @@
 
   NS_ASSERTION(self,"no self");
 
-  self->GetInterfaceInfo(&iface_info);
-  NS_ASSERTION(iface_info,"no interface info");
-
-  iface_info->GetMethodInfo(PRUint16(methodIndex), &info);
-  NS_ASSERTION(info,"no interface info");
+  self->mEntry->GetMethodInfo(PRUint16(methodIndex), &info);
+  NS_ASSERTION(info,"no method info");
+  if (! info)
+      return NS_ERROR_UNEXPECTED;
 
   paramCount = info->GetParamCount();
 
@@ -81,6 +80,8 @@
   else
     dispatchParams = paramBuffer;
   NS_ASSERTION(dispatchParams,"no place for params");
+  if (! dispatchParams)
+      return NS_ERROR_OUT_OF_MEMORY;
 
   for(i = 0; i < paramCount; ++i)
   {
@@ -152,9 +153,7 @@
     }
   }
 
-  result = self->CallMethod((PRUint16) methodIndex, info, dispatchParams);
-
-  NS_RELEASE(iface_info);
+  result = self->mOuter->CallMethod((PRUint16) methodIndex, info, dispatchParams);
 
   if(dispatchParams != paramBuffer)
     delete [] dispatchParams;
--- xpcom/reflect/xptcall/src/md/unix/xptcinvoke_asm_ipf64.s.orig	2005-04-06 19:04:07.000000000 +0000
+++ xpcom/reflect/xptcall/src/md/unix/xptcinvoke_asm_ipf64.s	2007-11-26 10:58:06.000000000 +0000
@@ -7,8 +7,8 @@
         .psr    lsb
 // Section has executable code
         .section .text, "ax","progbits"
-// procedure named 'XPTC_InvokeByIndex'
-        .proc   XPTC_InvokeByIndex
+// procedure named 'NS_InvokeByIndex_P'
+        .proc   NS_InvokeByIndex_P
 // manual bundling
         .explicit
 
@@ -19,12 +19,12 @@
 //      .exclass  invoke_copy_to_stack, @fullyvisible
         .type   invoke_copy_to_stack,@function
 
-//      .exclass  XPTC_InvokeByIndex, @fullyvisible
-        .type   XPTC_InvokeByIndex,@function
+//      .exclass  NS_InvokeByIndex_P, @fullyvisible
+        .type   NS_InvokeByIndex_P,@function
 
 // XPTC_InvokeByIndex(nsISupports* that, PRUint32 methodIndex,
 //   PRUint32 paramCount, nsXPTCVariant* params);
-XPTC_InvokeByIndex::
+NS_InvokeByIndex_P::
         .prologue
         .save ar.pfs, r37
 // allocate 4 input args, 6 local args, and 8 output args